<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- package声明pojo类所在的包,如果不写那么在class的name属性里需要指定包名全路径
     schema指数据库模式,一个模式下可以有多张表
    (2).schema: 指定当前映射文件对应的数据库表的schema名
    (3).catalog: 指定当前映射文件对应的数据库表的catalog名
    (4).default-cascade: 设置默认的级联方式(默认值为none)
    (5).default-access: 设置默认的属性访问方式(默认值为property)
    (6).default-lazy: 设置对没有指定延迟加载的映射类和集合设定为延迟加载(默认值为true)
    (7).auto-import: 设置当前映射文件中是否可以在HQL中使用非完整的类名(默认值为true)
    -->
<hibernate-mapping package="com.chenxi.hibernate.hbm" auto-import="true" default-access="property" default-lazy="true">
    <!--<class>定义类：根元素的子元素，用以定义一个持久化类与数据表的映射关系,如下是该元素包含的一些可选的属性-->
    <!--(1).name: 为当前映射文件指定对应的持久类名-->
    <!--(3).schema: 设置当前指定的持久类对应的数据库表的schema名-->
    <!--(4).catalog: 设置当前指定的持久类对应的数据库表的catalog名-->
    <!--(5).lazy: 设置是否使用延迟加载-->
    <!--(7).check: 指定一个SQL语句用于Schema前的条件检查-->
    <!--(8).where: 指定一个附加的SQL语句的where条件-->
    <!--(9).rowid: 指定是否支持ROWID-->
    <!--(10).entity-name：实体名称 默认值为类名-->
    <!--(11).subselect: 将不可变的只读实体映射到数据库的子查询中-->
    <!--(12).dynamic-update: 指定用于update的SQL语句是否动态生成 默认值为false-->
    <!--(13).dynamic-insert: 指定用于insert的SQL语句是否动态生成 默认值为false-->
    <!--(14).insert-before-update: 设定在Hibernate执行update之前是否通过select语句来确定对象是否确实被修改了,如果该对象的值没有改变,update语句将不会被执行(默认值为false)-->
    <!--(15).abstract: 用于在联合子类中标识抽象的超类(默认值为false)-->
    <!--(16).emutable: 表明该类的实例是否是可变的 默认值为fals-->
    <!--(17).proxy: 指定延迟加载代理类-->
    <!--(18).polymorphism: 指定使用多态查询的方式 默认值为implicit-->
    <!--(19).persister: 指定一个Persister类-->
    <!--(20).discriminator-value: 子类识别标识 默认值为类名-->
    <!--(21).optimistic-lock: 指定乐观锁定的策略 默认值为vesion-->
    <class name="Student" table="hbm_student">
        <!--name对应类的主键名称，column对象数据库主键名称，type指定当前映射对应的数据库表中的主键的数据类型，-->
        <!--unsaved-value: 判断此对象是否进行了保存daccess: Hibernate访问主键属性的策略(默认值为property)-->
        <id name="id" column="id" type="java.lang.Integer">
            <generator class="native"/>
        </id>
        <!--用于持久化类的属性与数据库表字段之间的映射,包含如下属性：-->
        <!--(1)name：持久化类的属性名，以小写字母开头-->
        <!--(2)column：数据库表的字段名-->
        <!--(3)type：Hibernate映射类型的名字-->
        <!--(4).formula: 设置当前节点对应的持久类中的属性的值由指定的SQL从数据库获取-->
        <!--注:指定的SQL必须用()括起来,指定SQL中使用列时必须用表的别名加.加列名的方式访问,但如果指定SQL中要使用当前映射对应的列时不能用表的别名加.加列名的方式访问,而是直接访问即可-->
        <!--如:formula="(select tn.columnName from tableName tn where tn.columnName=当前映射中的属性名)"-->
        <!--(5).unique: 设置该字段的值是否唯一(默认值为false)-->
        <!--(6).not-null: 设置该字段的值是否可以为null(默认值为false)-->
        <!--(7).not-found: 设置当当前节点对应的数据库字段为外键时引用的数据不存在时如何让处理(默认值为exception:产生异常,可选值为ignore:对不存在的应用关联到null)-->
        <!--(8).property-ref: 设置关联类的属性名，此属性和本类的关联相对应 默认值为关联类的主键-->
        <!--(9).entity-name: 被关联类的实体名-->
        <!--(10).lazy: 指定是否采用延迟加载及加载策略(默认值为proxy:通过代理进行关联,可选值为true:此对象采用延迟加载并在变量第一次被访问时抓取、false:此关联对象不采用延迟加载)-->
        <!--(11).access: Hibernate访问这个属性的策略(默认值为property)-->
        <!--(12).optimistic-lock: 指定此属性做更新操作时是否需要乐观锁定(默认值为true)-->
        <property name="name"/>
        <property name="birthday"/>
        <property name="address"/>

        <!--one-to-one节点的属性:-->
        <!--(1).name: 映射类属性的名字-->
        <!--(2).class: 关联类的名字-->
        <!--(3).formula: 绝大多数一对一关联都指向其实体的主键。在某些情况下会指向一个或多个字段或是一个表达式，此时可用一个SQL公式来表示-->
        <!--(4).cascade: 设置级联操作时的级联类型-->
        <!--(5).constrained: 表明当前类对应的表与被关联的表之间是否存在着外键约束 默认值为false-->
        <!--(6).fetch: 设置抓取数据的策略 可选值为 join外连接抓取、select序列选择抓取-->
        <!--(7).property-ref: 设置关联类的属性名，此属性和本类的主键相对应 默认值为关联类的主键-->
        <!--(8).access: Hibernate访问这个属性的策略(默认值为property)-->
        <!--(9).lazy: 指定是否采用延迟加载及加载策略 默认值为proxy通过代理进行关联 可选值为 true此对象采用延迟加载并在变量第一次被访问时抓取、false此关联对象不采用延迟加载-->
        <!--(10).entity-name: 被关联类的实体名-->


        <!--many-to-one 元素:-->
        <!--(1).name: 映射类属性的名字-->
        <!--(2).class: 关联类的名字-->
        <!--(3).formula: 绝大多数一对一关联都指向其实体的主键。在某些情况下会指向一个或多个字段或是一个表达式，此时可用一个SQL公式来表示-->
        <!--(4).column: 中间关联表映射到目标关联表的关联字段-->
        <!--(5).cascade: 设置级联操作时的级联类型-->
        <!--(6).fetch: 设置抓取数据的策略 默认值为select序列选择抓取 可选值为join外连接抓取-->
        <!--(7).lazy: 指定是否采用延迟加载及加载策略 默认值为proxy通过代理进行关联 可选值为 true此对象采用延迟加载并在变量第一次被访问时抓取、false此关联对象不采用延迟加载-->
        <!--(8).update: 进行update操作时是否包含此字段-->
        <!--(9).insert: 进行insert操作时是否包含此字段-->
        <!--(10).not-found: 指定外键引用的数据不存在时如何让处理 默认值为exception产生异常 可选值为ignore对不存在的应用关联到null-->


        <!--many-to-many 元素-->
        <!--set 元素-->
        <!--(1).name: 映射类属性的名字-->
        <!--(2).table: 关联的目标数据库表-->
        <!--(3).schema: 目标数据库表的schema名字-->
        <!--(4).catalog: 目标数据库表的catalog名字-->
        <!--(5).subselect: 定义一个子查询-->
        <!--(6).sort: 设置排序的类型 默认值为 unsorted不排序 可选值为 natural自然排序、comparatorClass实现接口类作为排序算法 避免与order-by同时使用-->
        <!--(7).lazy: 是否采用延迟加载-->
        <!--(8).inverse: 用于标识双向关联中被动的一方 默认值为false-->
        <!--(9).cascade: 设置级联操作时的级联类型-->
        <!--(10).mutable: 标识被关联对象是否可以改变 默认值为true-->
        <!--(11).order-by: 设置排序规则-->
        <!--(12).where: 增加筛选条件-->
        <!--(13).batch-size: 延迟加载时，一次读取数据的数量 默认值为1-->
        <!--(14).fetch: 设置抓取数据的策略 可选值为 join外连接抓取、select序列选择抓取-->
    </class>

</hibernate-mapping>
        <!--class节点的字节点：-->
        <!--(1).id: 定义当前映射文件对应的持久类的主键属性和数据表中主键字段的相关信息-->
        <!--(2).property: 定义当前映射文件对应的持久类的属性和数据表中字段的相关信息-->
        <!--(3).sql-insert: 使用定制的SQL语句执行insert操作-->
        <!--(4).sql-delete: 使用定制的SQL语句执行delete操作-->
        <!--(5).sql-update: 使用定制的SQL语句执行update操作-->
        <!--(6).subselect: 定义一个子查询-->
        <!--(7).comment: 定义表的注释-->
        <!--(8).composite-id: 持久类与数据库表对应的联合主键-->
        <!--(9).many-to-one: 定义对象间的多对一的关联关系-->
        <!--(10).one-to-one: 定义对象间的一对一的关联关系-->
        <!--(11).any: 定义any映射类型-->
        <!--(12).map: map类型的集合映射-->
        <!--(13).set: set类型的集合映射-->
        <!--(14).list: list类型的集合映射-->
        <!--(15).array: array类型的集合映射-->
        <!--(16).bag: bag类型的集合映射-->
        <!--(17).primitive-array: primitive-array类型的集合映射-->
        <!--(18).query: 定义装载实体的HQL语句-->
        <!--(19).sql-query: 定义装载实体的SQL语句-->
        <!--(20).synchronize: 定义持久化类所需要的同步资源-->
        <!--(21).query-list: 映射由查询返回的集合-->
        <!--(22).natural-id: 声明一个唯一的业务主键-->
        <!--(23).join: 将一个类的属性映射到多张表中-->
        <!--(24).sub-class: 声明多态映射中的子类-->
        <!--(25).joined-subclass: 生命多态映射中的来连接子类-->
        <!--(26).union-subclass: 声明多态映射中的联合子类-->
        <!--(27).loader: 定义持久化对象的加载器-->
        <!--(28).filter: 定义Hibernate使用的过滤器-->
        <!--(29).component: 定义组件映射-->
        <!--(30).dynamic-component: 定义动态组件映射-->
        <!--(31).properties: 定义一个包含多个属性的逻辑分组-->
        <!--(32).cache: 定义缓存的策略-->
        <!--(33).discriminator: 定义一个鉴别器-->
        <!--(34).meta: 设置类或属性的元数据属性-->
        <!--(35).timestamp: 指定表中包含时间戳的数据-->
        <!--(36).vesion: 指定表所包含的附带版本信息的数据-->